<?php
namespace Zeyon\Zpp;
class Parser {
public $length;
public function parse($input) {$this -> length = strlen($input);$input .= "\0";$pos = 0;return [$this -> _0($input, $pos), $pos, $this -> length];}
public function _0($input, &$pos) {$matches = [];while (( $match = $this -> _1($input, $pos) ) !== null)$match === true OR $matches[] = $match;return $matches ?: true;}
public function _1($input, &$pos) {if (( $match = $this -> _2($input, $pos) ) !== null)return $match === true ? true : ['BLK' => $match];if (( $match = $this -> _5($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _91($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _101($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _112($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _114($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _122($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _125($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _128($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _130($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _2($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _3($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _0($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _4($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _3($input, &$pos) {if ($input[$pos] === '{') {$pos++;return true;}}
public function _4($input, &$pos) {if ($input[$pos] === '}') {$pos++;return true;}}
public function _5($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _6($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _7($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['IF'] = $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['STAT'] = $match;if (( $match = $this -> _89($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _6($input, &$pos) {if (substr($input, $pos, 2) === 'if') {$pos += 2;return true;}}
public function _7($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _8($input, &$pos) {if ($input[$pos] === '(') {$pos++;return true;}}
public function _9($input, &$pos) {if (( $match = $this -> _10($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _30($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _10($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _11($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _29($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['ASSIGN'] = $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXP'] = $match;return $matches ?: true;}
public function _11($input, &$pos) {return ( $match = $this -> _12($input, $pos) ) === null ? true : $match;}
public function _12($input, &$pos) {if (( $match = $this -> _13($input, $pos) ) !== null)return $match === true ? true : ['UNARY' => $match];if (( $match = $this -> _14($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _13($input, &$pos) {if (substr($input, $pos, 5) === 'clone') {$pos += 5;return 'clone';}static $strings1 = array (
  '+' => true,
  '-' => true,
  '~' => true,
  '!' => true,
);if (isset($strings1[ $string = $input[$pos] ])) {$pos++;return $string;}}
public function _14($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _15($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _16($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['CAST'] = $match;if (( $match = $this -> _17($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _15($input, &$pos) {if ($input[$pos] === '<') {$pos++;return true;}}
public function _16($input, &$pos) {if (substr($input, $pos, 6) === 'string') {$pos += 6;return 'string';}static $strings5 = array (
  'float' => true,
  'array' => true,
);if (isset($strings5[ $string = substr($input, $pos, 5) ])) {$pos += 5;return $string;}if (substr($input, $pos, 4) === 'bool') {$pos += 4;return 'bool';}if (substr($input, $pos, 3) === 'int') {$pos += 3;return 'int';}}
public function _17($input, &$pos) {if ($input[$pos] === '>') {$pos++;return true;}}
public function _18($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _19($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['SCOPE'] = $match;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['VAR'] = $match;if (( $match = $this -> _21($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['KEYS'] = $match;return $matches ?: true;}
public function _19($input, &$pos) {static $strings1 = array (
  '$' => true,
  '@' => true,
);if (isset($strings1[ $string = $input[$pos] ])) {$pos++;return $string;}}
public function _20($input, &$pos) {if (preg_match('/^[a-zA-Z_]\\w*/ADs', substr($input, $pos), $matches)) {$pos += strlen( $string = $matches[0] );return $string;}}
public function _21($input, &$pos) {$matches = [];while (( $match = $this -> _22($input, $pos) ) !== null)$match === true OR $matches[] = $match;return $matches ?: true;}
public function _22($input, &$pos) {if (( $match = $this -> _23($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _25($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _23($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _24($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['NAME'] = $match;return $matches ?: true;}
public function _24($input, &$pos) {if ($input[$pos] === '.') {$pos++;return true;}}
public function _25($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _26($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _27($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXP'] = $match;if (( $match = $this -> _28($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _26($input, &$pos) {if ($input[$pos] === '[') {$pos++;return true;}}
public function _27($input, &$pos) {return ( $match = $this -> _9($input, $pos) ) === null || $match === true ? false : $match;}
public function _28($input, &$pos) {if ($input[$pos] === ']') {$pos++;return true;}}
public function _29($input, &$pos) {static $strings3 = array (
  '<<=' => true,
  '>>=' => true,
);if (isset($strings3[ $string = substr($input, $pos, 3) ])) {$pos += 3;return $string;}static $strings2 = array (
  '*=' => true,
  '/=' => true,
  '+=' => true,
  '-=' => true,
  '\\=' => true,
  '&=' => true,
  '^=' => true,
  '|=' => true,
);if (isset($strings2[ $string = substr($input, $pos, 2) ])) {$pos += 2;return $string;}if ($input[$pos] === '=') {$pos++;return '=';}}
public function _30($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _31($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['COND'] = $match;if (( $match = $this -> _86($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _31($input, &$pos) {static $stack;$stack === null AND $stack = function($matches, $groups, $index) use (&$stack) {$last = [];$new = [];$group = $groups[$index];foreach ($matches as $match) {if ($last && $match[0] === $group) {$index AND $last = $stack($last, $groups, $index - 1);$new[] = isset($last[1]) ? $last : $last[0];$last = [];}$last[] = $match;}if ($last) {$index AND $last = $stack($last, $groups, $index - 1);$new[] = isset($last[1]) ? $last : $last[0];}return $new;};if (( $init = $this -> _32($input, $pos) ) === null)return;$used = [];$matches = [];start:$save = $pos;static $strings3 = array (
  '===' => 'EQ',
  '!==' => 'EQ',
  '=_*' => 'EQ',
  '!_*' => 'EQ',
  '=^*' => 'EQ',
  '!^*' => 'EQ',
  '=$^' => 'EQ',
  '!$^' => 'EQ',
);if (isset($strings3[ $string = substr($input, $pos, 3) ])) {$group = $strings3[$string];$pos += 3;goto match;}static $strings2 = array (
  '<<' => 'SH',
  '>>' => 'SH',
  '<=' => 'CMP',
  '>=' => 'CMP',
  '==' => 'EQ',
  '!=' => 'EQ',
  '=*' => 'EQ',
  '!*' => 'EQ',
  '=~' => 'EQ',
  '!~' => 'EQ',
  '=_' => 'EQ',
  '!_' => 'EQ',
  '=^' => 'EQ',
  '!^' => 'EQ',
  '=$' => 'EQ',
  '!$' => 'EQ',
  '&&' => 'LAND',
  '||' => 'LOR',
);if (isset($strings2[ $string = substr($input, $pos, 2) ])) {$group = $strings2[$string];$pos += 2;goto match;}static $strings1 = array (
  '*' => 'MUL',
  '/' => 'MUL',
  '%' => 'MUL',
  '+' => 'ADD',
  '-' => 'ADD',
  '\\' => 'ADD',
  '<' => 'CMP',
  '>' => 'CMP',
  '&' => 'AND',
  '^' => 'XOR',
  '|' => 'OR',
);if (isset($strings1[ $string = $input[$pos] ])) {$group = $strings1[$string];$pos += 1;goto match;}goto end;match:if (( $match = $this -> _32($input, $pos) ) === null) {$pos = $save;goto end;}$used[$group] = true;$matches[] = [$group, $string, $match];goto start;end:if (!$matches)return $init;$groups = [];$index = -1;if (isset($used['MUL'])) {$groups[] = 'MUL';$index++;}if (isset($used['ADD'])) {$groups[] = 'ADD';$index++;}if (isset($used['SH'])) {$groups[] = 'SH';$index++;}if (isset($used['CMP'])) {$groups[] = 'CMP';$index++;}if (isset($used['EQ'])) {$groups[] = 'EQ';$index++;}if (isset($used['AND'])) {$groups[] = 'AND';$index++;}if (isset($used['XOR'])) {$groups[] = 'XOR';$index++;}if (isset($used['OR'])) {$groups[] = 'OR';$index++;}if (isset($used['LAND'])) {$groups[] = 'LAND';$index++;}if (isset($used['LOR'])) {$groups[] = 'LOR';$index++;}$matches = $stack($matches, $groups, $index);$matches[-1] = $init;return $matches;}
public function _32($input, &$pos) {if (( $match = $this -> _7($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _33($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _35($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _48($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _50($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _63($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _65($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _76($input, $pos) ) !== null)return $match === true ? true : ['CONST' => $match];if (( $match = $this -> _77($input, $pos) ) !== null)return $match === true ? true : ['NUM' => $match];if (( $match = $this -> _78($input, $pos) ) !== null)return $match === true ? true : ['STR' => $match];if (( $match = $this -> _79($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _47($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _85($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _33($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _34($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['PRE'] = $match;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _34($input, &$pos) {static $strings2 = array (
  '++' => true,
  '--' => true,
);if (isset($strings2[ $string = substr($input, $pos, 2) ])) {$pos += 2;return $string;}}
public function _35($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _36($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _36($input, &$pos) {if (( $match = $this -> _34($input, $pos) ) !== null)return $match === true ? true : ['POST' => $match];if (( $match = $this -> _37($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _45($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);return true;}
public function _37($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _38($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['PARAM'] = $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _38($input, &$pos) {return ( $match = $this -> _39($input, $pos) ) === null || $match === true ? false : $match;}
public function _39($input, &$pos) {if (( $match = $this -> _40($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _40($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _40($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _41($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _41($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['NAME'] = $match;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _42($input, &$pos) {if ($input[$pos] === ':') {$pos++;return true;}}
public function _43($input, &$pos) {if ($input[$pos] === ',') {$pos++;return true;}}
public function _44($input, &$pos) {if ($input[$pos] === ')') {$pos++;return true;}}
public function _45($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _46($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _47($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _46($input, &$pos) {if (substr($input, $pos, 2) === '->') {$pos += 2;return true;}}
public function _47($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['NAT'] = $match;if (( $match = $this -> _37($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _48($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _49($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['NEW'] = $match;if (( $match = $this -> _37($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _49($input, &$pos) {if (substr($input, $pos, 3) === 'new') {$pos += 3;return true;}}
public function _50($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _51($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _52($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['ARG'] = $match;if (( $match = $this -> _56($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['USE'] = $match;if (( $match = $this -> _60($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['FUNC'] = $match;if (( $match = $this -> _62($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _51($input, &$pos) {if (substr($input, $pos, 8) === 'function') {$pos += 8;return true;}}
public function _52($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _53($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _53($input, &$pos) {if (( $match = $this -> _54($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _54($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _54($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['NAME'] = $match;if (( $match = $this -> _55($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXP'] = $match;return $matches ?: true;}
public function _55($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _56($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _57($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _58($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _57($input, &$pos) {if (substr($input, $pos, 3) === 'use') {$pos += 3;return true;}}
public function _58($input, &$pos) {if (( $match = $this -> _59($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _59($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _59($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _41($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _60($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _3($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _61($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _4($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _61($input, &$pos) {return ( $match = $this -> _0($input, $pos) ) === null || $match === true ? false : $match;}
public function _62($input, &$pos) {return ( $match = $this -> _37($input, $pos) ) === null ? true : $match;}
public function _63($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _64($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _60($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['MACRO'] = $match;return $matches ?: true;}
public function _64($input, &$pos) {if (substr($input, $pos, 5) === 'macro') {$pos += 5;return true;}}
public function _65($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _66($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _67($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXTENDS'] = $match;if (( $match = $this -> _3($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _69($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['CLASS'] = $match;if (( $match = $this -> _4($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _66($input, &$pos) {if (substr($input, $pos, 5) === 'class') {$pos += 5;return true;}}
public function _67($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _68($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _68($input, &$pos) {if (( $match = $this -> _9($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _69($input, &$pos) {return ( $match = $this -> _70($input, $pos) ) === null || $match === true ? false : $match;}
public function _70($input, &$pos) {$matches = [];while (( $match = $this -> _71($input, $pos) ) !== null)$match === true OR $matches[] = $match;return $matches ?: true;}
public function _71($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _20($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['NAME'] = $match;if (( $match = $this -> _72($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _72($input, &$pos) {if (( $match = $this -> _73($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _75($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _73($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXP'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _74($input, &$pos) {if ($input[$pos] === ';') {$pos++;return true;}}
public function _75($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _52($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['ARG'] = $match;if (( $match = $this -> _60($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['FUNC'] = $match;return $matches ?: true;}
public function _76($input, &$pos) {if (substr($input, $pos, 5) === 'false') {$pos += 5;return 'false';}static $strings4 = array (
  'null' => true,
  'true' => true,
);if (isset($strings4[ $string = substr($input, $pos, 4) ])) {$pos += 4;return $string;}}
public function _77($input, &$pos) {if (preg_match('/^[+-]?((?:\\d*\\.\\d+|\\d+\\.\\d*)(?:[eE][+-]?\\d+)?|[1-9]\\d*|0(?:[xX][a-fA-F\\d]+|b[01]+)?)/ADs', substr($input, $pos), $matches)) {$pos += strlen( $string = $matches[0] );return $string;}}
public function _78($input, &$pos) {static $escape = ['n' => "\n", 'r' => "\r", 't' => "\t", 'v' => "\v", 'f' => "\f"];switch ( $anchor = $input[$pos] ) {case "'":case '"':for ($string = '', $index = $pos + 1, $length = $this -> length; $index < $length;)switch ( $char = $input[ $index++ ] ) {case '\\':if ($index === $length)return;switch ( $char = $input[ $index++ ] ) {case '\\':case $anchor:$string .= $char;break 2;}$anchor === '"' AND $string .= isset($escape[$char]) ? $escape[$char] : "\\$char";break;case $anchor:$pos = $index;return $string;default:$string .= $char;}}}
public function _79($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _26($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _80($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['ARRAY'] = $match;if (( $match = $this -> _28($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _80($input, &$pos) {return ( $match = $this -> _81($input, $pos) ) === null || $match === true ? false : $match;}
public function _81($input, &$pos) {if (( $match = $this -> _82($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _82($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _82($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _83($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['EXP'] = $match;return $matches ?: true;}
public function _83($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _84($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _84($input, &$pos) {if (( $match = $this -> _77($input, $pos) ) !== null)return $match === true ? true : ['NUM' => $match];if (( $match = $this -> _78($input, $pos) ) !== null)return $match === true ? true : ['STR' => $match];if (( $match = $this -> _20($input, $pos) ) !== null)return $match === true ? true : ['NAME' => $match];}
public function _85($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _12($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _32($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['SIMPLE'] = $match;return $matches ?: true;}
public function _86($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _87($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _88($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['EXPT'] = $match;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _30($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['EXPF'] = $match;return $matches ?: true;}
public function _87($input, &$pos) {if ($input[$pos] === '?') {$pos++;return true;}}
public function _88($input, &$pos) {return ( $match = $this -> _31($input, $pos) ) === null ? true : $match;}
public function _89($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _90($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['ELSE'] = $match;return $matches ?: true;}
public function _90($input, &$pos) {if (substr($input, $pos, 4) === 'else') {$pos += 4;return true;}}
public function _91($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _92($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _7($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['SWITCH'] = $match;if (( $match = $this -> _3($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _93($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['CASE'] = $match;if (( $match = $this -> _4($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _92($input, &$pos) {if (substr($input, $pos, 6) === 'switch') {$pos += 6;return true;}}
public function _93($input, &$pos) {$matches = [];while (( $match = $this -> _94($input, $pos) ) !== null)$match === true OR $matches[] = $match;return $matches ?: true;}
public function _94($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _95($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _99($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _95($input, &$pos) {if (( $match = $this -> _96($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _98($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _96($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _97($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['CASE'] = $match;return $matches ?: true;}
public function _97($input, &$pos) {if (substr($input, $pos, 4) === 'case') {$pos += 4;return true;}}
public function _98($input, &$pos) {if (substr($input, $pos, 7) === 'default') {$pos += 7;return true;}}
public function _99($input, &$pos) {if (( $match = $this -> _100($input, $pos) ) !== null)return $match === true ? true : ['CODE' => $match];if (( $match = $this -> _60($input, $pos) ) !== null)return $match === true ? true : ['BLK' => $match];}
public function _100($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _0($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _101($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _102($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['STAT'] = $match;return $matches ?: true;}
public function _102($input, &$pos) {if (( $match = $this -> _103($input, $pos) ) !== null)return $match === true ? true : ['WHILE' => $match];if (( $match = $this -> _105($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);if (( $match = $this -> _109($input, $pos) ) !== null)return $match === true ? true : (is_array($match) ? $match : true);}
public function _103($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _104($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _7($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _104($input, &$pos) {if (substr($input, $pos, 5) === 'while') {$pos += 5;return true;}}
public function _105($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _106($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['FOREACH'] = $match;if (( $match = $this -> _107($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _106($input, &$pos) {if (substr($input, $pos, 7) === 'foreach') {$pos += 7;return true;}}
public function _107($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _43($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _108($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['KEY'] = $match;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['VAL'] = $match;return $matches ?: true;}
public function _108($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _42($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _109($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _110($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _111($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['INIT'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _27($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['FOR'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _111($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['REP'] = $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _110($input, &$pos) {if (substr($input, $pos, 3) === 'for') {$pos += 3;return true;}}
public function _111($input, &$pos) {return ( $match = $this -> _9($input, $pos) ) === null ? true : $match;}
public function _112($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _113($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['STAT'] = $match;if (( $match = $this -> _103($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['DO'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _113($input, &$pos) {if (substr($input, $pos, 2) === 'do') {$pos += 2;return true;}}
public function _114($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _115($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['TRY'] = $match;if (( $match = $this -> _116($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _89($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _120($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _115($input, &$pos) {if (substr($input, $pos, 3) === 'try') {$pos += 3;return true;}}
public function _116($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _117($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _118($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['CATCH'] = $match;return $matches ?: true;}
public function _117($input, &$pos) {if (substr($input, $pos, 5) === 'catch') {$pos += 5;return true;}}
public function _118($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _8($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _119($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _44($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _119($input, &$pos) {return ( $match = $this -> _18($input, $pos) ) === null ? true : $match;}
public function _120($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _121($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _1($input, $pos) ) === null) {$pos = $save;return true;}if ($match !== true)$matches['FINALLY'] = $match;return $matches ?: true;}
public function _121($input, &$pos) {if (substr($input, $pos, 7) === 'finally') {$pos += 7;return true;}}
public function _122($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _123($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _124($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['DEL'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _123($input, &$pos) {if (substr($input, $pos, 6) === 'delete') {$pos += 6;return true;}}
public function _124($input, &$pos) {if (( $match = $this -> _18($input, $pos) ) === null)return;$matches = [];$match === true OR $matches[] = $match;start:$save = $pos;if ($this -> _43($input, $pos) === null)goto end;if (( $match = $this -> _18($input, $pos) ) === null) {$pos = $save;goto end;}$match === true OR $matches[] = $match;goto start;end:return $matches ?: true;}
public function _125($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _126($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['JMP'] = $match;if (( $match = $this -> _127($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['LEAP'] = $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _126($input, &$pos) {if (substr($input, $pos, 8) === 'continue') {$pos += 8;return 'continue';}if (substr($input, $pos, 5) === 'break') {$pos += 5;return 'break';}}
public function _127($input, &$pos) {return ( $match = $this -> _77($input, $pos) ) === null ? true : $match;}
public function _128($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _129($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['MISC'] = $match;if (( $match = $this -> _9($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _129($input, &$pos) {if (substr($input, $pos, 6) === 'expand') {$pos += 6;return 'expand';}if (substr($input, $pos, 5) === 'throw') {$pos += 5;return 'throw';}if (substr($input, $pos, 4) === 'echo') {$pos += 4;return 'echo';}}
public function _130($input, &$pos) {$matches = [];$save = $pos;if (( $match = $this -> _131($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)$matches['RET'] = $match;if (( $match = $this -> _111($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;if (( $match = $this -> _74($input, $pos) ) === null) {$pos = $save;return;}if ($match !== true)is_array($match) AND $matches += $match;return $matches ?: true;}
public function _131($input, &$pos) {return ( $match = $this -> _132($input, $pos) ) === null ? true : $match;}
public function _132($input, &$pos) {if (substr($input, $pos, 6) === 'return') {$pos += 6;return 'return';}if (substr($input, $pos, 4) === 'exit') {$pos += 4;return 'exit';}}
}